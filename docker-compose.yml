version: "3"

services:
  # Frontend
  client:
    container_name: client
    build:
      context: ./client
      dockerfile: Dockerfile
    image: mutcompute:client
    ports:
      - 3000:3000
    volumes:
      - ./client/src:/app/src
    command: yarn start


  # Backend
  backend:
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: mutcompute:backend
    ports:
      - "5000:5000"
    volumes:
      - ./data:/app/data
    environment:
      SES_EMAIL_HOST: ${SES_EMAIL_HOST}
      SES_EMAIL_PORT: ${SES_EMAIL_PORT}
      SES_SMTP_USERNAME: ${SES_SMTP_USERNAME}
      SES_SMTP_PASSWORD: ${SES_SMTP_PASSWORD}
      DB_URI: ${DB_URI_BACKEND}
      HOSTNAME: ${HOSTNAME}
      PORT: ${PORT}
    depends_on:
      - nn_api
    command: gunicorn -b 0.0.0.0:5000 api:app


  nn_api:
    container_name: nn_api
    build:
      context: ./nets
      dockerfile: Dockerfile
    image: mutcompute:api
    volumes: 
      - ./data:/mutcompute_2020/data
      - ./nets/data:/mutcompute_2020/mutcompute/data
    environment:
      PYTHONUNBUFFERED: 1
      DB_URI: ${DB_URI_NN_API}
      DB_NN_TABLE: ${DB_NN_TABLE}
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_REGION: ${AWS_REGION}
      JOB_QUEUE_URL: ${JOB_QUEUE_URL}
    ports:
      - 8000
    entrypoint: python api.py


  # #Queue/Worker Processes
  celery:
    build:
      context: ./nets
      dockerfile: Dockerfile
      target: prod
    image: mutcompute:api
    volumes: 
      - ./data:/mutcompute_2020/data
      - ./nets/data:/mutcompute_2020/mutcompute/data
    environment:
      PYTHONUNBUFFERED: 1
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      SES_EMAIL_HOST: ${SES_EMAIL_HOST}
      SES_EMAIL_PORT: ${SES_EMAIL_PORT}
      SES_SMTP_USERNAME: ${SES_SMTP_USERNAME}
      SES_SMTP_PASSWORD: ${SES_SMTP_PASSWORD}
      DB_URI: ${DB_URI_NN_API}
      DB_NN_TABLE: ${DB_NN_TABLE}
      HOSTNAME: ${HOSTNAME}
      PORT: ${PORT}
    entrypoint: celery -A task.celery worker -l debug --concurrency 2 
    depends_on:
      - redis 

  predictor:
    container_name: predictor
    image: mutcompute:predictor
    command: python3 ./main.py
    volumes: 
      - ./data:/mutcompute_2020/data
    environment:
      LOG_LEVEL: INFO
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      JOB_QUEUE_URL: ${JOB_QUEUE_URL}
      AWS_REGION: ${AWS_REGION}
      MODEL_BUCKET: ${MODEL_BUCKET}
      MODEL_LIST: ${MODEL_LIST}
      PIPELINE_FILE: ${PIPELINE_FILE}
      SES_EMAIL_HOST: ${SES_EMAIL_HOST}
      SES_EMAIL_PORT: ${SES_EMAIL_PORT}
      SES_SMTP_USERNAME: ${SES_SMTP_USERNAME}
      SES_SMTP_PASSWORD: ${SES_SMTP_PASSWORD}
      DB_URI: ${DB_URI_NN_API}
      DB_NN_TABLE: ${DB_NN_TABLE}
      TF_CPP_MIN_LOG_LEVEL: 3

  redis:
    container_name: redis
    image: redis:latest
    hostname: redis
    ports:
      - 6379 


  # # Reverse Proxy
  nginx:
    container_name: nginx
    image: nginx:latest
    restart: unless-stopped
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/nginx_ssl.conf:/etc/nginx/conf.d/default.conf 
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    command: "/bin/sh -c 'while :; do sleep 6h & wait $${!}; nginx -s reload; done & nginx -g \"daemon off;\"'"

  # SSL certificates
  certbot:
    image: certbot/certbot
    restart: unless-stopped
    volumes:
      - ./nginx/certbot/conf:/etc/letsencrypt
      - ./nginx/certbot/www:/var/www/certbot
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $${!}; done;'"
